# dotfiles
* Wezterm
** Imports and config initialized
#+BEGIN_SRC lua :tangle wezterm/wezterm.lua
local wezterm = require("wezterm")

local config = {}
#+END_SRC
** Set graphic options
*** Set theme to Solarized Dark
#+BEGIN_SRC lua :tangle wezterm/wezterm.lua
config.color_scheme = "Solarized (dark) (terminal.sexy)"
#+END_SRC

*** Disable ligatures
#+BEGIN_SRC lua :tangle wezterm/wezterm.lua
config.harfbuzz_features = { "calt=0", "clig=0", "liga=0" }
#+END_SRC

*** Disable terminal tabs
#+BEGIN_SRC lua :tangle wezterm/wezterm.lua
config.enable_tab_bar = false
#+END_SRC

*** Set font size
#+BEGIN_SRC lua :tangle wezterm/wezterm.lua
config.font_size = 14
#+END_SRC

** Returns config
#+BEGIN_SRC lua :tangle wezterm/wezterm.lua
return config
#+END_SRC
* Zsh
** Enable p10k
#+BEGIN_SRC conf :tangle zsh/zshrc
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
#+END_SRC
** Path and editor
#+BEGIN_SRC conf :tangle zsh/zshrc
# If you come from bash you might have to change your $PATH.
export PATH="$HOME/bin:/usr/local/bin:/Users/alliso/go/bin:$PATH"

export EDITOR="nvim"
#+END_SRC
** Oh-my-zsh config
#+BEGIN_SRC conf :tangle zsh/zshrc

# Path to your oh-my-zsh installation.
export ZSH="/Users/alliso/Documents/dotfiles/zsh/oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"
CUSTOM_FUNCTIONS="/Users/alliso/Documents/dotfiles/zsh/custom"
ZELLIJ_CONFIG_DIR="/Users/alliso/.config/zellij"
#+END_SRC
** Plugins
#+BEGIN_SRC conf :tangle zsh/zshrc
plugins=(git)
#+END_SRC
** Sources
#+BEGIN_SRC conf :tangle zsh/zshrc
source $ZSH/oh-my-zsh.sh
source $CUSTOM_FUNCTIONS/navigation.zsh
source $CUSTOM_FUNCTIONS/mongo.zsh
source $CUSTOM_FUNCTIONS/obsidian.zsh
source $CUSTOM_FUNCTIONS/kafka.zsh
source $CUSTOM_FUNCTIONS/zellij.zsh
source $CUSTOM_FUNCTIONS/secrets.zsh
eval "$(zoxide init zsh)"
#+END_SRC
** Prompt p10k
#+BEGIN_SRC conf :tangle zsh/zshrc
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
#+END_SRC
** Tmux config
#+BEGIN_SRC conf :tangle zsh/zshrc
alias tmux="TERM=xterm-256color tmux"
export TERM=xterm-256color

alias tat="tmux a -t"
#+END_SRC
** Custom aliases
#+BEGIN_SRC conf :tangle zsh/zshrc
alias dbash='docker exec -it $(docker ps --format "{{.Names}}" | fzf ) bash'
#+END_SRC
** Fzf config
#+BEGIN_SRC conf :tangle zsh/zshrc
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

if type rg &> /dev/null; then
  export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'
  export FZF_DEFAULT_OPTS='-m --height 50% --border'
fi
#+END_SRC
** Extra
*** Navigation
#+begin_src conf :tangle zsh/custom/navigation.zsh
function cds(){
   dir=$(ls /Users/alliso/Documents/services/ | fzf)
   full_dir="/Users/alliso/Documents/services/$dir"

   zellij options --session-name $dir --default-cwd $full_dir --default-layout /Users/alliso/Documents/dotfiles/zellij/services_layout.kdl --pane-frames true
}

function cdr(){
   dir=$(ls /Users/alliso/Documents/CTT/ | fzf)
   full_dir="/Users/alliso/Documents/CTT/$dir"

   zellij options --session-name $dir --default-cwd $full_dir
}

#+end_src
*** Mongo
#+begin_src conf :tangle zsh/custom/mongo.zsh
alias mecfs='mongo-exporter-cli -mongo-from=$MONGO_STA -mongo-to=$MONGO_LOCAL'
#+end_src
*** Obsidian
#+begin_src conf :tangle zsh/custom/obsidian.zsh
function on(){
 if [ $# -lt 1 ]
  then
    echo "Usage: $funcstack[1] <file-name> "
    return
  fi
  filename=$1.md
  tmux new-session -A "cd /Users/alliso/Documents/obsidian-vaults/ctt/inbox && touch $filename && nvim $filename"
}

function oe(){
 if [ $# -lt 1 ]
  then
    echo "Usage: $funcstack[1] <file-name> "
    return
  fi
  filename=$1.md
  sname="obsidian-creator"
  tmux new-session -D -s $sname -A "cd /Users/alliso/Documents/obsidian-vaults/ctt/inbox && touch $filename && nvim $filename"
  tmux send-keys -t $name ":ObsidianTemplate drawing_template"
  tmux kill-session -t $name
  open obsidian://vault/ctt/$filename
}
#+end_src
*** Kafka
#+begin_src conf :tangle zsh/custom/kafka.zsh
function kgp() {
  kafka-go-producer --topic=$(pwd | awk -F'/' '{print $NF}') --file=$1
}
#+end_src
*** Zellij
#+begin_src conf :tangle zsh/custom/zellij.zsh
alias zj='zellij'

function zjg(){
         session=$(zellij ls -s | fzf)
         zellij a $session
}

#+end_src
* Zellij
** Config
*** Default config
#+begin_src conf :tangle zellij/config.kdl
keybinds {
    normal {
        // uncomment this and adjust key if using copy_on_select=false
        // bind "Alt c" { Copy; }
    }
    locked {
        bind "Ctrl g" { SwitchToMode "Normal"; }
    }
    resize {
        bind "Ctrl n" { SwitchToMode "Normal"; }
        bind "h" "Left" { Resize "Increase Left"; }
        bind "j" "Down" { Resize "Increase Down"; }
        bind "k" "Up" { Resize "Increase Up"; }
        bind "l" "Right" { Resize "Increase Right"; }
        bind "H" { Resize "Decrease Left"; }
        bind "J" { Resize "Decrease Down"; }
        bind "K" { Resize "Decrease Up"; }
        bind "L" { Resize "Decrease Right"; }
        bind "=" "+" { Resize "Increase"; }
        bind "-" { Resize "Decrease"; }
    }
    pane {
        bind "Ctrl p" { SwitchToMode "Normal"; }
        bind "h" "Left" { MoveFocus "Left"; }
        bind "l" "Right" { MoveFocus "Right"; }
        bind "j" "Down" { MoveFocus "Down"; }
        bind "k" "Up" { MoveFocus "Up"; }
        bind "p" { SwitchFocus; }
        bind "n" { NewPane; SwitchToMode "Normal"; }
        bind "d" { NewPane "Down"; SwitchToMode "Normal"; }
        bind "r" { NewPane "Right"; SwitchToMode "Normal"; }
        bind "x" { CloseFocus; SwitchToMode "Normal"; }
        bind "f" { ToggleFocusFullscreen; SwitchToMode "Normal"; }
        bind "z" { TogglePaneFrames; SwitchToMode "Normal"; }
        bind "w" { ToggleFloatingPanes; SwitchToMode "Normal"; }
        bind "e" { TogglePaneEmbedOrFloating; SwitchToMode "Normal"; }
        bind "c" { SwitchToMode "RenamePane"; PaneNameInput 0;}
    }
    move {
        bind "Ctrl h" { SwitchToMode "Normal"; }
        bind "n" "Tab" { MovePane; }
        bind "p" { MovePaneBackwards; }
        bind "h" "Left" { MovePane "Left"; }
        bind "j" "Down" { MovePane "Down"; }
        bind "k" "Up" { MovePane "Up"; }
        bind "l" "Right" { MovePane "Right"; }
    }
    tab {
        bind "Ctrl t" { SwitchToMode "Normal"; }
        bind "r" { SwitchToMode "RenameTab"; TabNameInput 0; }
        bind "h" "Left" "Up" "k" { GoToPreviousTab; }
        bind "l" "Right" "Down" "j" { GoToNextTab; }
        bind "n" { NewTab; SwitchToMode "Normal"; }
        bind "x" { CloseTab; SwitchToMode "Normal"; }
        bind "s" { ToggleActiveSyncTab; SwitchToMode "Normal"; }
        bind "b" { BreakPane; SwitchToMode "Normal"; }
        bind "]" { BreakPaneRight; SwitchToMode "Normal"; }
        bind "[" { BreakPaneLeft; SwitchToMode "Normal"; }
        bind "1" { GoToTab 1; SwitchToMode "Normal"; }
        bind "2" { GoToTab 2; SwitchToMode "Normal"; }
        bind "3" { GoToTab 3; SwitchToMode "Normal"; }
        bind "4" { GoToTab 4; SwitchToMode "Normal"; }
        bind "5" { GoToTab 5; SwitchToMode "Normal"; }
        bind "6" { GoToTab 6; SwitchToMode "Normal"; }
        bind "7" { GoToTab 7; SwitchToMode "Normal"; }
        bind "8" { GoToTab 8; SwitchToMode "Normal"; }
        bind "9" { GoToTab 9; SwitchToMode "Normal"; }
        bind "Tab" { ToggleTab; }
    }
    scroll {
        bind "Ctrl s" { SwitchToMode "Normal"; }
        bind "e" { EditScrollback; SwitchToMode "Normal"; }
        bind "s" { SwitchToMode "EnterSearch"; SearchInput 0; }
        bind "Ctrl c" { ScrollToBottom; SwitchToMode "Normal"; }
        bind "j" "Down" { ScrollDown; }
        bind "k" "Up" { ScrollUp; }
        bind "Ctrl f" "PageDown" "Right" "l" { PageScrollDown; }
        bind "Ctrl b" "PageUp" "Left" "h" { PageScrollUp; }
        bind "d" { HalfPageScrollDown; }
        bind "u" { HalfPageScrollUp; }
        // uncomment this and adjust key if using copy_on_select=false
        // bind "Alt c" { Copy; }
    }
    search {
        bind "Ctrl s" { SwitchToMode "Normal"; }
        bind "Ctrl c" { ScrollToBottom; SwitchToMode "Normal"; }
        bind "j" "Down" { ScrollDown; }
        bind "k" "Up" { ScrollUp; }
        bind "Ctrl f" "PageDown" "Right" "l" { PageScrollDown; }
        bind "Ctrl b" "PageUp" "Left" "h" { PageScrollUp; }
        bind "d" { HalfPageScrollDown; }
        bind "u" { HalfPageScrollUp; }
        bind "n" { Search "down"; }
        bind "p" { Search "up"; }
        bind "c" { SearchToggleOption "CaseSensitivity"; }
        bind "w" { SearchToggleOption "Wrap"; }
        bind "o" { SearchToggleOption "WholeWord"; }
    }
    entersearch {
        bind "Ctrl c" "Esc" { SwitchToMode "Scroll"; }
        bind "Enter" { SwitchToMode "Search"; }
    }
    renametab {
        bind "Ctrl c" { SwitchToMode "Normal"; }
        bind "Esc" { UndoRenameTab; SwitchToMode "Tab"; }
    }
    renamepane {
        bind "Ctrl c" { SwitchToMode "Normal"; }
        bind "Esc" { UndoRenamePane; SwitchToMode "Pane"; }
    }
    session {
        bind "Ctrl o" { SwitchToMode "Normal"; }
        bind "Ctrl s" { SwitchToMode "Scroll"; }
        bind "d" { Detach; }
        bind "w" {
            LaunchOrFocusPlugin "session-manager" {
                floating true
                move_to_focused_tab true
            };
            SwitchToMode "Normal"
        }
    }
    tmux {
        bind "[" { SwitchToMode "Scroll"; }
        bind "Ctrl b" { Write 2; SwitchToMode "Normal"; }
        bind "\"" { NewPane "Down"; SwitchToMode "Normal"; }
        bind "%" { NewPane "Right"; SwitchToMode "Normal"; }
        bind "z" { ToggleFocusFullscreen; SwitchToMode "Normal"; }
        bind "c" { NewTab; SwitchToMode "Normal"; }
        bind "," { SwitchToMode "RenameTab"; }
        bind "p" { GoToPreviousTab; SwitchToMode "Normal"; }
        bind "n" { GoToNextTab; SwitchToMode "Normal"; }
        bind "Left" { MoveFocus "Left"; SwitchToMode "Normal"; }
        bind "Right" { MoveFocus "Right"; SwitchToMode "Normal"; }
        bind "Down" { MoveFocus "Down"; SwitchToMode "Normal"; }
        bind "Up" { MoveFocus "Up"; SwitchToMode "Normal"; }
        bind "h" { MoveFocus "Left"; SwitchToMode "Normal"; }
        bind "l" { MoveFocus "Right"; SwitchToMode "Normal"; }
        bind "j" { MoveFocus "Down"; SwitchToMode "Normal"; }
        bind "k" { MoveFocus "Up"; SwitchToMode "Normal"; }
        bind "o" { FocusNextPane; }
        bind "d" { Detach; }
        bind "Space" { NextSwapLayout; }
        bind "x" { CloseFocus; SwitchToMode "Normal"; }
    }
    shared_except "locked" {
        bind "Ctrl g" { SwitchToMode "Locked"; }
        bind "Ctrl q" { Quit; }
        bind "Alt n" { NewPane; }
        bind "Alt i" { MoveTab "Left"; }
        bind "Alt o" { MoveTab "Right"; }
        bind "Alt h" "Alt Left" { MoveFocusOrTab "Left"; }
        bind "Alt l" "Alt Right" { MoveFocusOrTab "Right"; }
        bind "Alt j" "Alt Down" { MoveFocus "Down"; }
        bind "Alt k" "Alt Up" { MoveFocus "Up"; }
        bind "Alt =" "Alt +" { Resize "Increase"; }
        bind "Alt -" { Resize "Decrease"; }
        bind "Alt [" { PreviousSwapLayout; }
        bind "Alt ]" { NextSwapLayout; }
    }
    shared_except "normal" "locked" {
        bind "Enter" "Esc" { SwitchToMode "Normal"; }
    }
    shared_except "pane" "locked" {
        bind "Ctrl p" { SwitchToMode "Pane"; }
    }
    shared_except "resize" "locked" {
        bind "Ctrl n" { SwitchToMode "Resize"; }
    }
    shared_except "scroll" "locked" {
        bind "Ctrl s" { SwitchToMode "Scroll"; }
    }
    shared_except "session" "locked" {
        bind "Ctrl o" { SwitchToMode "Session"; }
    }
    shared_except "tab" "locked" {
        bind "Ctrl t" { SwitchToMode "Tab"; }
    }
    shared_except "move" "locked" {
        bind "Ctrl h" { SwitchToMode "Move"; }
    }
    shared_except "tmux" "locked" {
        bind "Ctrl b" { SwitchToMode "Tmux"; }
    }
}

plugins {
    tab-bar location="zellij:tab-bar"
    status-bar location="zellij:status-bar"
    strider location="zellij:strider"
    compact-bar location="zellij:compact-bar"
    session-manager location="zellij:session-manager"
    welcome-screen location="zellij:session-manager" {
        welcome_screen true
    }
    filepicker location="zellij:strider" {
        cwd "/"
    }
}

// Choose what to do when zellij receives SIGTERM, SIGINT, SIGQUIT or SIGHUP
// eg. when terminal window with an active zellij session is closed
// Options:
//   - detach (Default)
//   - quit
//
// on_force_close "quit"

//  Send a request for a simplified ui (without arrow fonts) to plugins
//  Options:
//    - true
//    - false (Default)
//
simplified_ui true

// Choose the path to the default shell that zellij will use for opening new panes
// Default: $SHELL
//
// default_shell "fish"

// Choose the path to override cwd that zellij will use for opening new panes
//
// default_cwd ""

// Toggle between having pane frames around the panes
// Options:
//   - true (default)
//   - false
//
pane_frames false

// Toggle between having Zellij lay out panes according to a predefined set of layouts whenever possible
// Options:
//   - true (default)
//   - false
//
// auto_layout true

// Whether sessions should be serialized to the cache folder (including their tabs/panes, cwds and running commands) so that they can later be resurrected
// Options:
//   - true (default)
//   - false
//
// session_serialization false

// Whether pane viewports are serialized along with the session, default is false
// Options:
//   - true
//   - false (default)
// serialize_pane_viewport true

// Scrollback lines to serialize along with the pane viewport when serializing sessions, 0
// defaults to the scrollback size. If this number is higher than the scrollback size, it will
// also default to the scrollback size. This does nothing if `serialize_pane_viewport` is not true.
//
// scrollback_lines_to_serialize 10000

// Define color themes for Zellij
// For more examples, see: https://github.com/zellij-org/zellij/tree/main/example/themes
// Once these themes are defined, one of them should to be selected in the "theme" section of this file
//
// themes {
//     dracula {
//         fg 248 248 242
//         bg 40 42 54
//         red 255 85 85
//         green 80 250 123
//         yellow 241 250 140
//         blue 98 114 164
//         magenta 255 121 198
//         orange 255 184 108
//         cyan 139 233 253
//         black 0 0 0
//         white 255 255 255
//     }
// }

themes {
     solarized-dark {
        fg 253 246 227
        bg 0 43 54
        black 7 54 66
        red 220 50 47
        green 133 153 0
        yellow 181 137 0
        blue 38 139 210
        magenta 211 54 130
        cyan 42 161 152
        white 238 232 213
        orange 203 75 22
    }
 }

theme "solarized-dark"

// Choose the theme that is specified in the themes section.
// Default: default
//
// theme "default"

// The name of the default layout to load on startup
// Default: "default"
//
// default_layout "compact"

// Choose the mode that zellij uses when starting up.
// Default: normal
//
// default_mode "locked"

// Toggle enabling the mouse mode.
// On certain configurations, or terminals this could
// potentially interfere with copying text.
// Options:
//   - true (default)
//   - false
//
// mouse_mode false

// Configure the scroll back buffer size
// This is the number of lines zellij stores for each pane in the scroll back
// buffer. Excess number of lines are discarded in a FIFO fashion.
// Valid values: positive integers
// Default value: 10000
//
// scroll_buffer_size 10000

// Provide a command to execute when copying text. The text will be piped to
// the stdin of the program to perform the copy. This can be used with
// terminal emulators which do not support the OSC 52 ANSI control sequence
// that will be used by default if this option is not set.
// Examples:
//
// copy_command "xclip -selection clipboard" // x11
// copy_command "wl-copy"                    // wayland
// copy_command "pbcopy"                     // osx

// Choose the destination for copied text
// Allows using the primary selection buffer (on x11/wayland) instead of the system clipboard.
// Does not apply when using copy_command.
// Options:
//   - system (default)
//   - primary
//
// copy_clipboard "primary"

// Enable or disable automatic copy (and clear) of selection when releasing mouse
// Default: true
//
// copy_on_select false

// Path to the default editor to use to edit pane scrollbuffer
// Default: $EDITOR or $VISUAL
//
// scrollback_editor "/usr/bin/vim"

// When attaching to an existing session with other users,
// should the session be mirrored (true)
// or should each user have their own cursor (false)
// Default: false
//
// mirror_session true

// The folder in which Zellij will look for layouts
//
// layout_dir "/path/to/my/layout_dir"

// The folder in which Zellij will look for themes
//
// theme_dir "/path/to/my/theme_dir"

// Enable or disable the rendering of styled and colored underlines (undercurl).
// May need to be disabled for certain unsupported terminals
// Default: true
//
// styled_underlines false

// Enable or disable writing of session metadata to disk (if disabled, other sessions might not know
// metadata info on this session)
// Default: false
//
// disable_session_metadata true
#+end_src
** Layouts
*** Services
#+begin_src conf :tangle zellij/services_layout.kdl
layout {
   pane size=1 borderless=true {
            plugin location="zellij:compact-bar"
   }
   pane split_direction="vertical" {
        pane split_direction="horizontal"{
            pane command="zsh" start_suspended=true {
                args "-c" "docker compose up -d"
        }
        pane command="zsh" start_suspended=true {
            args "-c" "docker compose down"
        }
        }
        pane
    }
    pane size=1 borderless=true {
            plugin location="zellij:status-bar"
    }
}
#+end_src
* Tmux
** Windows settings
#+BEGIN_SRC conf :tangle tmux/tmux.conf
# 0 is too far from ` ;)
set -g base-index 1
# Automatically set window title
set-window-option -g automatic-rename on
set-option -g set-titles on
#+END_SRC
** Vim keybindings
#+BEGIN_SRC conf :tangle tmux/tmux.conf

#set -g default-terminal screen-256color
set -g status-keys vi
set -g history-limit 10000

setw -g mode-keys vi
#setw -g mouse on
setw -g monitor-activity on
#+END_SRC
** Split windows
#+BEGIN_SRC conf :tangle tmux/tmux.conf
bind-key v split-window -h
bind-key s split-window -v
#+END_SRC
** Resize panes
*** Resize panes by 1 pixel
#+BEGIN_SRC conf :tangle tmux/tmux.conf
bind-key M-j resize-pane -D
bind-key M-k resize-pane -U
bind-key M-h resize-pane -L
bind-key M-l resize-pane -R
#+END_SRC
*** Resize panes by 5 pixels
#+BEGIN_SRC conf :tangle tmux/tmux.conf

bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key H resize-pane -L 5
bind-key L resize-pane -R 5
#+END_SRC
** Select panes
*** Vim style pane selection
#+BEGIN_SRC conf :tangle tmux/tmux.conf
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
#+END_SRC
*** Use Alt+vim keys without prefix to swith panes
#+BEGIN_SRC conf :tangle tmux/tmux.conf
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R
#+END_SRC
** Theme config
#+BEGIN_SRC conf :tangle tmux/tmux.conf
set -g status-bg black
set -g status-fg white
set -g status-interval 1
set -g status-left-length 30
set -g status-left '#[fg=green](#S) #(whoami) '
set -g status-right '#[default] #[fg=white]%H:%M:%S#[default]'
#+END_SRC

** Random settings
*** Reload tmux config with r
#+BEGIN_SRC conf :tangle tmux/tmux.conf
bind r source-file ~/.tmux.conf
#+END_SRC

*** No delay for escape key press
#+BEGIN_SRC conf :tangle tmux/tmux.conf
set -sg escape-time 0
#+END_SRC
